How to access services from the external network

1- Node Port
2- Ingress Controller
3- MetalLB


1️⃣ NodePort : A NodePort is the simplest way to expose a Kubernetes service to the outside world.

How it works:   When you create a service of type NodePort, Kubernetes opens a specific port (30000–32767) on every node in the cluster.
Use case: Simple testing or small internal setups. Not ideal for production because managing ports and load balancing is manual.

Traffic sent to <NodeIP>:<NodePort> is forwarded to the service, and then to the correct pod(s).
Example:
apiVersion: v1
kind: Service
metadata:
  name: my-app
spec:
  type: NodePort
  selector:
    app: my-app
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30080




2️⃣ Ingress Controller -  An Ingress Controller is a Kubernetes component that manages external HTTP/HTTPS access to your services.

How it works:  You define Ingress resources with routing rules (like domain names, paths).
Use case:      Route multiple domains or paths to different services. Supports SSL termination, rewrites, and advanced load balancing. Production-friendly.

The Ingress Controller (e.g., NGINX Ingress, Traefik, or HAProxy) reads these rules and routes traffic accordingly.

Example:
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: my-ingress
spec:
  rules:
    - host: myapp.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: my-app
                port:
                  number: 80




3️⃣ MetalLB  MetalLB is a LoadBalancer implementation for bare-metal Kubernetes clusters (non-cloud environments).

Why it’s needed:
On cloud platforms (AWS, GCP, Azure), Kubernetes automatically provisions a load balancer using cloud APIs.
On bare metal (like your own servers or local lab), there’s no external load balancer — MetalLB fills that gap.

How it works:
You assign a pool of IPs (from your LAN) to MetalLB.
When a service of type LoadBalancer is created, MetalLB allocates one of these IPs and announces it on the local network using ARP (Layer 2) or BGP (Layer 3).
Use case:
Enables external access via real IPs on local or on-prem clusters.
Works with Ingress controllers to expose apps to users.

Example Config:
apiVersion: metallb.io/v1beta1
kind: IPAddressPool
metadata:
  name: my-ip-pool
  namespace: metallb-system
spec:
  addresses:
    - 192.168.1.240-192.168.1.250
---
apiVersion: metallb.io/v1beta1
kind: L2Advertisement
metadata:
  name: my-l2-advert
  namespace: metallb-system
###################################################################################################################################

✅ In short
Component	                  Purpose	                                                        Typical Use Case
NodePort	                  Expose service on a port on all nodes	                           Simple testing or internal use
Ingress Controller	        Route external HTTP/HTTPS traffic to services	                   Production-grade traffic management
MetalLB	                    Provide external LoadBalancer IPs on bare-metal clusters	       On-prem / self-hosted Kubernetes

####################################################################################################################################

