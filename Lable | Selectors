ðŸ”– Labels   > Extra identical informailtion about the POD  |Labels are key-value pairs attached to Kubernetes objects (like Pods, Services, Deployments, Nodes).

ðŸŽ¯ Selectors > A selector is how you query/filter objects based on their labels.   ðŸ”‘ 1. Equality-Based Selectors  | ðŸŽ¯ 2. Set-Based Selectors


kubectl get pod --show-labels -n web    # To show lables


POD1 = env= prod, version=1.0, project=uat,zone=india  
POD2
POD3
POD4

kubectl get pod -l env=prod                      # Filter pod where lable env=prod
kubectl lable pod test zone=Mumbai zone=india    # apply the lable on pod named test

kubectl lable pod test env=production --overwrite  # Overwrite the lable 
kubectl lable pod test env-                        # Remove the lable env


kubectl get pod --selector env=uat -n web -o wide | kubectl get pod -l env=uat -n web -o wide                # Equenity bases query
kubectl get pod --selector env!=uat -n web -o wide | kubectl get pod --selector env!=uat -n web -o wide      # Equenity bases query

kubectl get pods -l 'env in (dev,uat,prod)' -n web -o wide                          # set bases query  
kubectl get pods --selector 'env in (dev,uat,prod)' -n web -o wide                 # set bases query
kubectl get pods -l 'env notin (dev,uat,prod)' -n web -o wide                          # set bases query  
kubectl get pods --selector 'env notin (dev,uat,prod)' -n web -o wide                 # set bases query

Set-based selectors use operators like:

in
notin
exists (key) or does not exist (!key)
