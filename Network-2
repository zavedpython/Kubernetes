## Service Discovery ##

https://kubernetes.io/docs/concepts/services-networking/service/    # manifests

Service IP--- how to create service IP on a POD

kubectl get service   # To see the service IP
kubectl expose pod rbl-865f684976-2nwj5 --name=web --port=80 
or
kubectl  expose deploy mysql --name=abc --port=3306

Breakdown
kubectl expose               → Creates a new Service object from an existing resource.
pod rbl-865f684976-2nwj5     → Use the Pod named rbl-865f684976-2nwj5 as the template.
--name=web                   → The new Service will be called web.
--port=80                    → The Service will listen on port 80 (the Service’s port).

kubectl get endpoints    # to see the service rule

# kubectl describe service db

Name:                     db
Namespace:                default
Labels:                   app=mysql
                          pod-template-hash=6499c788c
Annotations:              <none>
Selector:                 app=mysql,pod-template-hash=6499c788c
Type:                     ClusterIP
IP Family Policy:         SingleStack
IP Families:              IPv4
IP:                       10.110.229.61
IPs:                      10.110.229.61
Port:                     <unset>  3306/TCP
TargetPort:               3306/TCP
Endpoints:
Session Affinity:         None
Internal Traffic Policy:  Cluster
Events:                   <none>
root@master-1:~#

###################################################################### https://ronaknathani.com/blog/2020/07/kubernetes-nodeport-and-iptables-rules/
# iptables -t nat -L PREROUTING | column -t
# iptables -t nat -L KUBE-SERVICES | column -t     # This is to see the how many service IP you taken
iptables -t nat -L <Table name> -n | column -t     # To see how the traffic distrubuted between multiple POD, tBle name will come from above command



